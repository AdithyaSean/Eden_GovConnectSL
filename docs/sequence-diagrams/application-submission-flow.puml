@startuml application_submission_flow
title Application Submission Flow (Passport Renewal Example)
' =====================================================================
' Based on passport-renewal schema three-step form (personal, documents, appointment)
' =====================================================================
actor User
actor Admin as "Worker/Admin" #DDDDDD
participant UI as "DynamicApplicationForm"
participant Auth as "useAuth()"
participant FS as "Firestore"
participant AR as "agentRuns collection"
participant AUD as "auditLogs collection"

== Step Navigation ==
User -> UI: Interact with dynamic steps (schema-driven)
UI -> UI: validateStep(schema)

== Documents (Step 2) ==
User -> UI: Select file
UI -> UI: FileReader readAsDataURL
UI -> UI: onUploadComplete(base64)
UI -> UI: store in uploadedFiles

== Appointment (Step 3) ==
User -> UI: Pick date & time
UI -> UI: compute appointmentDateTime

== Submit (After Step 3) ==
User -> UI: Submit form(handleSubmit)
activate UI
UI -> Auth: get user
Auth --> UI: user{id,name,nic,email}
UI -> UI: validateStep()
alt validation fails or !user
  UI -> User: Toast error
  deactivate UI
else valid
  UI -> FS: add applications {service,userId,user,status:Pending Payment,details,documents,timeline:[Submitted]}
  FS --> UI: appDocRef(id)
  UI -> AUD: add auditLogs {action:CreateApplication, entityId:appId}
  AUD --> UI: ack
  UI -> UI: setShowPaymentDialog(true)
  UI -> User: Dialog (Pay Now / Pay Later)
  alt User chooses Pay Now
    User -> UI: Click Pay Now
    UI -> UI: router.push(/payment?service=...&amount=...&ref=<user?.id>)
  else Pay Later
    User -> UI: Click Pay Later
    UI -> UI: router.push(/my-applications)
  end
  deactivate UI
end

== Optional Agent Assisted Automation ==
User -> UI: Request automated external submission
UI -> FS: update application {status:In Progress, timeline += AutomationRequested}
FS --> UI: ack
UI -> AR: add agentRuns {flow:externalSubmission, status:pending, applicationId}
AR --> UI: runId
UI -> AUD: add auditLogs {action:StartAgentRun, entityId:runId}
... Agent Worker (not shown) processes ...
note over AR
 Planned integration with browser-use project:
 1. Generate structured prompt (service schema + user profile snapshot)
 2. Launch headless navigation & form fill
 3. Emit checkpoints on captcha / uncertainty
 4. Return normalized submission receipt
end note
note bottom
 Standardized prompt keys: chat, suggestServices, summarizeServiceInfo, automation.fillForm.
 Checkpoints stored in separate `checkpoints` collection (see PLAN.md / HITL doc).
end note
AR -> UI: status update (paused - needs captcha)
UI -> Admin: Show HITL checkpoint (captcha required)
Admin -> UI: Provide captcha solution
UI -> AR: update agentRuns {status:running}
AR --> UI: ack
AR -> UI: status update (completed)
UI -> FS: update application {status:Completed, timeline += AutomationCompleted}
FS --> UI: ack
UI -> AUD: add auditLogs {action:AutomationComplete, entityId:appId} ' standardized; CompleteApplication may be emitted for manual completion flows.
@enduml
