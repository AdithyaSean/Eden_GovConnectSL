
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function hasRole(r) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == r;
    }
    
    function hasRoleAny(roles) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    // Users: Can read their own data. Admins can read/write all.
    match /users/{userId} {
      allow read: if isOwner(userId) || hasRole('Super Admin');
      allow create, update, delete: if hasRole('Super Admin');
    }
    
    // Applications: Users can create their own. Can read/update their own.
    // Workers and Admins can read/update all.
    match /applications/{appId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update: if isOwner(resource.data.userId) || hasRoleAny(['worker_transport', 'worker_immigration', 'worker_identity', 'worker_health', 'worker_tax', 'worker_pension', 'worker_landregistry', 'worker_exams', 'worker_finepayment', 'worker_registeredvehicles', 'worker_missingdocuments', 'worker_support', 'Super Admin']);
      allow delete: if hasRole('Super Admin');
    }
    
    // Payments: Users can create and read their own. Workers/Admins can read all.
    match /payments/{paymentId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow read: if isOwner(resource.data.userId) || hasRoleAny(['worker_support', 'Super Admin']);
    }
    
    // Notifications: Users can read/update their own (for marking as read).
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        // Create is typically server-side
    }
    
    // Support Tickets: Users can create/read their own. Support workers/Admins can read/write.
    match /supportTickets/{ticketId} {
        allow create: if request.auth != null;
        allow read, update: if isOwner(resource.data.userId) || hasRoleAny(['worker_support', 'Super Admin']);
    }
    
    // Vehicle & Fine data is public for prototype, can be restricted by NIC later
    match /fines/{fineId} {
      allow read: if request.auth != null;
    }
    
    match /vehicles/{vehicleId} {
      allow read: if request.auth != null;
    }
    
    // Agent Runs & Checkpoints are admin/worker read-only for now
    match /agentRuns/{runId} {
        allow read: if hasRoleAny(['Super Admin']);
        // create is server-side
    }
    
    match /checkpoints/{checkpointId} {
        allow read, update: if hasRoleAny(['Super Admin']);
         // create is server-side
    }
    
    match /auditLogs/{logId} {
        allow read: if hasRoleAny(['Super Admin']);
        // create is server-side
    }
  }
}
